package com.feedingtracker.backend;import java.util.Optional;import java.util.Random;import lombok.Data;import lombok.RequiredArgsConstructor;import org.springframework.data.rest.webmvc.ResourceNotFoundException;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("boards")@RequiredArgsConstructorpublic class BoardController {		FeedingRepository feedingRepository;		@PostMapping(produces = "application/json")	public Board createBoard() {		int leftLimit = 48; // numeral '0'		int rightLimit = 90; // letter 'z'		int targetStringLength = 6;		Random random = new Random();				String id = random.ints(leftLimit, rightLimit + 1)				.filter(i -> (i <= 57 || i >= 65))				.limit(targetStringLength)				.collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)				.toString();		return new Board(id, 0);	}		@GetMapping(path="/{id}", produces = "application/json")	public Board getBoard(@PathVariable String boardId) {		Optional<Feeding> lastChangedFeeding = feedingRepository.findFirstByBoardOrderByRevisionDesc(boardId);		if (lastChangedFeeding.isEmpty()) {			throw new ResourceNotFoundException();		}		return new Board(lastChangedFeeding.get().getBoard(), lastChangedFeeding.get().getRevision());	}		@RequiredArgsConstructor	@Data	class Board {		private final String id;		private final int revision;	}}