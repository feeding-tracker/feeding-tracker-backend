package com.feedingtracker.backend;import java.util.Collections;import java.util.List;import java.util.Optional;import java.util.UUID;import lombok.RequiredArgsConstructor;import org.springframework.data.rest.webmvc.ResourceNotFoundException;import org.springframework.http.HttpStatus;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.server.ResponseStatusException;@RestController@RequestMapping("feedings")@RequiredArgsConstructorpublic class FeedingController {     private final FeedingRepository feedingRepository;        @PostMapping(produces = "application/json")    @Transactional    public Feeding createFeeding(@RequestBody Feeding feeding) {        Optional<Feeding> lastModifiedFeeding = feedingRepository.findFirstByBoardOrderByRevisionDesc(feeding.getBoard());        feeding.setRevision(lastModifiedFeeding.isPresent() ? lastModifiedFeeding.get().getRevision() + 1 : 1);        Feeding newFeeding = feedingRepository.save(feeding);        return newFeeding;    }        @GetMapping(produces = "application/json")    public List<Feeding> getFeedings(@RequestParam("board") String board, @RequestParam("revision") int clientRevision) {        if (!StringUtils.hasLength(board)) {            return Collections.emptyList();        }        return feedingRepository.findByBoardAndRevisionGreaterThanOrderByRevisionDesc(board, clientRevision);    }        @GetMapping(path="/{id}", produces = "application/json")    public Feeding getFeeding(@PathVariable UUID id) {        return feedingRepository.findById(id).get();    }        @PostMapping(path="/{id}", produces = "application/json")    public Feeding updateFeeding(@RequestBody Feeding feeding) {        Optional<Feeding> toUpdate = feedingRepository.findById(feeding.getId());        if (toUpdate.isEmpty()) {            throw new ResourceNotFoundException();        }        if (toUpdate.get().isDeleted()) {            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Feeding was deleted.");        }        int lastRevision = feedingRepository.findFirstByBoardOrderByRevisionDesc(feeding.getBoard()).get().getRevision();        feeding.setRevision(lastRevision + 1);        return feedingRepository.save(feeding);    }    }